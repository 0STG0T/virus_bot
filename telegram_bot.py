import asyncio
import logging
from typing import Optional, Dict, Any
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from session_manager import SessionManager
from spin_worker import SpinWorker
import config

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from logging_config import setup_logging
    setup_logging()
except ImportError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )

logger = logging.getLogger(__name__)

class VirusBotManager:
    def __init__(self):
        self.session_manager = SessionManager()
        self.spin_worker = None
        self.app = None
        self.is_running = False
        self.main_message_id = None
        self.main_chat_id = None
        self.update_task = None
        self.cached_stats = None
        self.last_operation_results = None
        self.auto_spin_task = None
        self.auto_spin_enabled = config.AUTO_SPIN_ENABLED

    async def setup(self, bot_token: str):
        config.BOT_TOKEN = bot_token

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        from telegram.request import HTTPXRequest
        request = HTTPXRequest(
            connection_pool_size=20,
            read_timeout=config.TELEGRAM_READ_TIMEOUT,
            write_timeout=config.TELEGRAM_WRITE_TIMEOUT,
            connect_timeout=config.TELEGRAM_CONNECT_TIMEOUT,
            pool_timeout=config.TELEGRAM_POOL_TIMEOUT
        )

        self.app = Application.builder().token(bot_token).request(request).build()

        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CallbackQueryHandler(self.button_callback))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)

        # –°–æ–∑–¥–∞–µ–º SpinWorker —Å callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.spin_worker = SpinWorker(
            self.session_manager,
            notification_callback=self.send_notification
        )

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
        loaded_count = await self.session_manager.load_sessions()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} —Å–µ—Å—Å–∏–π")

    async def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Ä–æ–≥–æ–º –ø—Ä–∏–∑–µ"""
        if self.app and config.LOG_CHAT_ID:
            try:
                await self.app.bot.send_message(
                    chat_id=config.LOG_CHAT_ID,
                    text=f"üíé –¶–ï–ù–ù–´–ô –ü–†–ò–ó: {message}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def get_account_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º"""
        try:
            session_names = await self.session_manager.get_session_names()
            total_accounts = len(session_names)

            if total_accounts == 0:
                return {
                    'total': 0,
                    'ready': 0,
                    'issues': 0,
                    'ready_percent': 0,
                    'issues_percent': 0,
                    'last_update': datetime.now().strftime("%H:%M")
                }

            # –î–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
            # –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            valid_count, invalid_count = await self.session_manager.validate_all_sessions()

            ready_percent = int((valid_count / total_accounts) * 100) if total_accounts > 0 else 0
            issues_percent = int((invalid_count / total_accounts) * 100) if total_accounts > 0 else 0

            stats = {
                'total': total_accounts,
                'ready': valid_count,
                'issues': invalid_count,
                'ready_percent': ready_percent,
                'issues_percent': issues_percent,
                'last_update': datetime.now().strftime("%H:%M")
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if (hasattr(self, 'last_operation_results') and
                self.last_operation_results and
                self.last_operation_results.get('action') == 'balance'):

                balance_results = self.last_operation_results.get('results', [])
                total_gifts = sum(r.get('gifts_count', 0) for r in balance_results if r.get('success'))
                accounts_with_gifts = sum(1 for r in balance_results if r.get('success') and r.get('gifts_count', 0) > 0)

                if total_gifts > 0:
                    stats['total_gifts'] = total_gifts
                    stats['accounts_with_gifts'] = accounts_with_gifts

            return stats
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                'total': 0,
                'ready': 0,
                'issues': 0,
                'ready_percent': 0,
                'issues_percent': 0,
                'last_update': datetime.now().strftime("%H:%M"),
                'error': str(e)
            }

    def format_main_message(self, stats: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        if stats.get('error'):
            return f"ü§ñ Virus Bot Manager\n\n‚ùå –û—à–∏–±–∫–∞: {stats['error']}\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}"

        if stats['total'] == 0:
            return f"ü§ñ Virus Bot Manager\n\nüì≠ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update']}"

        status_emoji = "üü¢" if stats['ready_percent'] >= 90 else "üü°" if stats['ready_percent'] >= 70 else "üî¥"

        message = f"ü§ñ Virus Bot Manager\n\n"
        message += f"{status_emoji} –°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n"
        message += f"‚úÖ –ì–æ—Ç–æ–≤–æ: {stats['ready']}/{stats['total']} ({stats['ready_percent']}%)\n"

        if stats['issues'] > 0:
            message += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {stats['issues']}/{stats['total']} ({stats['issues_percent']}%)\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if stats.get('total_gifts', 0) > 0:
            message += f"üéÅ –ü–æ–¥–∞—Ä–∫–æ–≤: {stats['total_gifts']} (—É {stats.get('accounts_with_gifts', 0)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤)\n"

        message += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['last_update']}"

        return message

    def get_main_keyboard(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX"""
        keyboard = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            [InlineKeyboardButton("üé∞ –§—Ä–∏ —Å–ø–∏–Ω—ã", callback_data="action_spin"),
             InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="action_balance")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å", callback_data="action_validate")],
            # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="action_refresh")]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not config.LOG_CHAT_ID:
            config.LOG_CHAT_ID = update.effective_chat.id

        self.main_chat_id = update.effective_chat.id

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await self.get_account_stats()
        self.cached_stats = stats

        message_text = self.format_main_message(stats)
        reply_markup = self.get_main_keyboard()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sent_message = await update.message.reply_text(
            message_text,
            reply_markup=reply_markup
        )

        self.main_message_id = sent_message.message_id

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤ (–∫–∞–∂–¥—ã–π —á–∞—Å)
        if self.update_task:
            self.update_task.cancel()
        self.update_task = asyncio.create_task(self.auto_update_and_spins_monitor())

        # –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—Å–µ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
        if self.auto_spin_task:
            self.auto_spin_task.cancel()
            self.auto_spin_task = None

    async def auto_update_and_spins_monitor(self):
        """–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ + –∞–≤—Ç–æ—Å–ø–∏–Ω—ã (–∫–∞–∂–¥—ã–π —á–∞—Å)"""
        while self.is_running and self.main_message_id and self.main_chat_id:
            try:
                await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å

                logger.info("üîÑ –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ + –∞–≤—Ç–æ—Å–ø–∏–Ω—ã")

                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–µ–ª–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã
                if self.auto_spin_enabled:
                    await self.perform_hourly_auto_spins()

                # 2. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                new_stats = await self.get_account_stats()

                # 3. –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if new_stats != self.cached_stats:
                    self.cached_stats = new_stats

                    message_text = self.format_main_message(new_stats)
                    reply_markup = self.get_main_keyboard()

                    await self.app.bot.edit_message_text(
                        chat_id=self.main_chat_id,
                        message_id=self.main_message_id,
                        text=message_text,
                        reply_markup=reply_markup
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –µ–∂–µ—á–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                await asyncio.sleep(30)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ

    async def perform_hourly_auto_spins(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã (–≤—Å—Ç—Ä–æ–µ–Ω–æ –≤ –µ–∂–µ—á–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)"""
        try:
            session_names = await self.session_manager.get_session_names()
            if not session_names:
                return

            logger.info("üîç –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤...")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            rich_accounts = []
            for session_name in session_names:
                try:
                    balance_result = await self.spin_worker.check_single_account_balance(session_name)
                    if balance_result.get('success') and balance_result.get('stars_balance', 0) >= config.AUTO_SPIN_THRESHOLD:
                        rich_accounts.append(session_name)
                        logger.info(f"üí∞ {session_name} –∏–º–µ–µ—Ç {balance_result['stars_balance']} –∑–≤–µ–∑–¥ - –≥–æ—Ç–æ–≤ –∫ –ø–ª–∞—Ç–Ω–æ–º—É —Å–ø–∏–Ω—É")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {session_name}: {e}")

            if rich_accounts:
                logger.info(f"üé∞ –ù–∞–π–¥–µ–Ω–æ {len(rich_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –µ–∂–µ—á–∞—Å–Ω—ã—Ö –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤")

                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –¥–ª—è –±–æ–≥–∞—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                results = await self.spin_worker.perform_paid_spins_batch(rich_accounts)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                await self.send_auto_spin_notification(results)
            else:
                logger.info("üí∏ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ—á–∞—Å–Ω—ã—Ö –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤: {e}")

    async def auto_update_main_message(self):
        """–£–°–¢–ê–†–ï–í–®–ò–ô: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å (–∑–∞–º–µ–Ω–µ–Ω –Ω–∞ auto_update_and_spins_monitor)"""
        while self.is_running and self.main_message_id and self.main_chat_id:
            try:
                await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å (–∏–∑–º–µ–Ω–µ–Ω–æ —Å 1 –º–∏–Ω—É—Ç—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)

                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                new_stats = await self.get_account_stats()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if new_stats != self.cached_stats:
                    self.cached_stats = new_stats

                    message_text = self.format_main_message(new_stats)
                    reply_markup = self.get_main_keyboard()

                    await self.app.bot.edit_message_text(
                        chat_id=self.main_chat_id,
                        message_id=self.main_message_id,
                        text=message_text,
                        reply_markup=reply_markup
                    )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(30)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ

    async def auto_paid_spins_monitor(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –±–∞–ª–∞–Ω—Å –∏ –¥–µ–ª–∞–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –ø—Ä–∏ 200+ –∑–≤–µ–∑–¥–∞—Ö"""
        while self.is_running and self.auto_spin_enabled:
            try:
                await asyncio.sleep(config.AUTO_SPIN_CHECK_INTERVAL)

                session_names = await self.session_manager.get_session_names()
                if not session_names:
                    continue

                logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤...")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                rich_accounts = []
                for session_name in session_names:
                    try:
                        balance_result = await self.spin_worker.check_single_account_balance(session_name)
                        if balance_result.get('success') and balance_result.get('stars_balance', 0) >= config.AUTO_SPIN_THRESHOLD:
                            rich_accounts.append(session_name)
                            logger.info(f"üí∞ {session_name} –∏–º–µ–µ—Ç {balance_result['stars_balance']} –∑–≤–µ–∑–¥ - –≥–æ—Ç–æ–≤ –∫ –ø–ª–∞—Ç–Ω–æ–º—É —Å–ø–∏–Ω—É")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {session_name}: {e}")

                if rich_accounts:
                    logger.info(f"üé∞ –ù–∞–π–¥–µ–Ω–æ {len(rich_accounts)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤")

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –¥–ª—è –±–æ–≥–∞—Ç—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                    results = await self.spin_worker.perform_paid_spins_batch(rich_accounts)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    await self.send_auto_spin_notification(results)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤: {e}")
                await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–µ–Ω—å—à–µ

    async def send_auto_spin_notification(self, results):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤"""
        if not results or not self.main_chat_id:
            return

        successful_spins = sum(1 for r in results if r.get('success', False))
        total_spins = len(results)
        total_stars_activated = sum(r.get('stars_activated', 0) for r in results)
        high_value_prizes = sum(1 for r in results if r.get('high_value_prize', False))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = f"ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ü–ª–∞—Ç–Ω—ã–µ –°–ø–∏–Ω—ã**\n\n"
        notification += f"üé∞ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {successful_spins}/{total_spins} —Å–ø–∏–Ω–æ–≤\n"

        if total_stars_activated > 0:
            notification += f"‚≠ê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {total_stars_activated}\n"

        if high_value_prizes > 0:
            notification += f"üíé –¶–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã: {high_value_prizes}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ —Å–∞–º—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        interesting_results = []
        for result in results:
            if result.get('success'):
                session_name = result['session_name']
                stars = result.get('stars_activated', 0)
                high_value = result.get('high_value_prize', False)

                if high_value or stars > 0:
                    detail = f"‚Ä¢ {session_name}"
                    if high_value:
                        detail += " üíé"
                    if stars > 0:
                        detail += f" (+{stars} –∑–≤–µ–∑–¥)"
                    interesting_results.append(detail)

        if interesting_results:
            notification += f"\n**–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            for detail in interesting_results[:10]:
                notification += detail + "\n"

            if len(interesting_results) > 10:
                notification += f"... –∏ –µ—â–µ {len(interesting_results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"

        try:
            await self.app.bot.send_message(
                chat_id=self.main_chat_id,
                text=notification,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ—Å–ø–∏–Ω–∞—Ö: {e}")
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ markdown
            try:
                await self.app.bot.send_message(
                    chat_id=self.main_chat_id,
                    text=notification.replace('*', '').replace('`', '')
                )
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e2}")

    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        try:
            await query.answer()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query: {e}")

        if query.data.startswith("action_"):
            action = query.data.replace("action_", "")
            await self.handle_action(query, action)
        elif query.data == "show_details":
            await self.show_detailed_results(query)
        elif query.data == "back_to_main":
            await self.back_to_main_menu(query)
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {query.data}")

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        logger.error(f"Exception while handling an update: {context.error}")

        # –î–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –ø–∞–¥–∞–µ–º
        if "NetworkError" in str(context.error) or "ConnectError" in str(context.error):
            logger.warning("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...")
            return

        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–µ–º —á—Ç–æ-—Ç–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {context.error}")

    async def handle_action(self, query, action: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX"""
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π
        session_names = await self.session_manager.get_session_names()
        if not session_names:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π\n\n–î–æ–±–∞–≤—å—Ç–µ .session —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É sessions/",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]])
            )
            return

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if action == "refresh":
            await self.handle_refresh(query)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        start_message = f"‚è≥ {self.get_action_name(action)}...\n\n" \
                       f"üìä –ê–∫–∫–∞—É–Ω—Ç–æ–≤: {len(session_names)}\n" \
                       f"‚è±Ô∏è –û–∂–∏–¥–∞–π—Ç–µ, –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."

        cancel_keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_main")
        ]])

        await query.edit_message_text(start_message, reply_markup=cancel_keyboard)

        # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        last_update_time = [0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –≤ –∑–∞–º—ã–∫–∞–Ω–∏–∏
        total_sessions = len(session_names)

        async def progress_callback(completed: int, total: int):
            current_time = asyncio.get_event_loop().time()
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 1.5 —Å–µ–∫—É–Ω–¥—ã
            if current_time - last_update_time[0] >= 1.5 or completed == 0 or completed == total:
                last_update_time[0] = current_time

                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç
                percent = int((completed / total) * 100) if total > 0 else 0

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
                bar_length = 10
                filled = int((completed / total) * bar_length) if total > 0 else 0
                bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)

                progress_message = f"‚è≥ {self.get_action_name(action)}...\n\n" \
                                 f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total} ({percent}%)\n" \
                                 f"{bar}\n\n" \
                                 f"‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤..."

                try:
                    await query.edit_message_text(progress_message, reply_markup=cancel_keyboard)
                except Exception as e:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
                    pass

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            await progress_callback(0, total_sessions)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–ª–±—ç–∫–æ–º
            if action == "spin":
                results = await self.spin_worker.perform_spins_batch(session_names, progress_callback)
            elif action == "validate":
                results = await self.spin_worker.validate_all_accounts_batch(session_names, progress_callback)
            elif action == "balance":
                results = await self.spin_worker.check_all_balances_batch(session_names, progress_callback=progress_callback)
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]])
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.last_operation_results = {
                'action': action,
                'results': results,
                'timestamp': datetime.now().strftime("%H:%M:%S")
            }

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            summary = self.format_operation_summary(action, results)

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = []

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
            quick_actions = []
            if action == "balance":
                quick_actions = [
                    InlineKeyboardButton("üé∞ –§—Ä–∏ —Å–ø–∏–Ω—ã", callback_data="action_spin"),
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="action_balance")
                ]
            elif action == "spin":
                quick_actions = [
                    InlineKeyboardButton("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="action_balance"),
                    InlineKeyboardButton("üîÑ –ï—â—ë —Å–ø–∏–Ω—ã", callback_data="action_spin")
                ]
            elif action == "validate":
                quick_actions = [
                    InlineKeyboardButton("üé∞ –§—Ä–∏ —Å–ø–∏–Ω—ã", callback_data="action_spin"),
                    InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="action_balance")
                ]

            if quick_actions:
                keyboard.append(quick_actions)

            keyboard.extend([
                [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data="show_details")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])

            await query.edit_message_text(
                summary,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {action}: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ {self.get_action_name(action).lower()}:\n{str(e)}\n\nüîÑ –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å {self.get_action_name(action).lower()}", callback_data=f"action_{action}")],
                    [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_to_main")]
                ])
            )

    async def handle_refresh(self, query):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            await query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            new_stats = await self.get_account_stats()
            self.cached_stats = new_stats

            message_text = self.format_main_message(new_stats)
            reply_markup = self.get_main_keyboard()

            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.main_message_id = query.message.message_id

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
                ]])
            )

    def estimate_operation_time(self, action: str, account_count: int) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç (—Å–µ–∫—É–Ω–¥—ã)
        time_per_account = {
            'spin': 8,  # –§—Ä–∏ —Å–ø–∏–Ω—ã - –¥–æ–ª—å—à–µ –≤—Å–µ–≥–æ
            'balance': 3,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ - —Å—Ä–µ–¥–Ω–µ
            'validate': 2,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ - –±—ã—Å—Ç—Ä–µ–µ
            'refresh': 1   # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
        }

        total_seconds = account_count * time_per_account.get(action, 5)

        if total_seconds < 60:
            return f"{total_seconds} —Å–µ–∫"
        else:
            minutes = total_seconds // 60
            seconds = total_seconds % 60
            if seconds > 0:
                return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
            else:
                return f"{minutes} –º–∏–Ω"

    def get_action_name(self, action: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        names = {
            'spin': '–§—Ä–∏ —Å–ø–∏–Ω—ã',
            'validate': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏',
            'balance': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞',
            'refresh': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        }
        return names.get(action, action)

    def format_operation_summary(self, action: str, results: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        total = len(results)
        if total == 0:
            return f"üìä {self.get_action_name(action)} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"

        success_count = sum(1 for r in results if r.get('success', False))
        error_count = total - success_count

        success_percent = int((success_count / total) * 100) if total > 0 else 0
        error_percent = int((error_count / total) * 100) if total > 0 else 0

        summary = f"üìä {self.get_action_name(action)} - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã\n\n"
        summary += f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total} ({success_percent}%)\n"

        if error_count > 0:
            summary += f"‚ùå –û—à–∏–±–∫–∏: {error_count}/{total} ({error_percent}%)\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if action == "spin":
            total_stars = sum(r.get('stars_activated', 0) for r in results)
            if total_stars > 0:
                summary += f"‚≠ê –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–≤–µ–∑–¥: {total_stars}\n"

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ä–æ–≥–∏–µ –ø—Ä–∏–∑—ã
            high_value_prizes = sum(1 for r in results if r.get('high_value_prize', False))
            if high_value_prizes > 0:
                summary += f"üíé –¶–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã: {high_value_prizes}\n"

        elif action == "balance":
            total_balance = sum(r.get('stars_balance', 0) for r in results if r.get('success'))
            total_gifts = sum(r.get('gifts_count', 0) for r in results if r.get('success'))
            summary += f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å –∑–≤–µ–∑–¥: {total_balance}\n"

            if total_gifts > 0:
                summary += f"üéÅ –í—Å–µ–≥–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {total_gifts}\n"

            rich_accounts = sum(1 for r in results if r.get('stars_balance', 0) >= 200)
            if rich_accounts > 0:
                summary += f"üíé –ì–æ—Ç–æ–≤—ã –∫ –ø–ª–∞—Ç–Ω—ã–º —Å–ø–∏–Ω–∞–º: {rich_accounts}\n"

        summary += f"\n‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        return summary

    async def show_detailed_results(self, query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        if not self.last_operation_results:
            await query.edit_message_text("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return

        action = self.last_operation_results['action']
        results = self.last_operation_results['results']
        timestamp = self.last_operation_results['timestamp']

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report_lines = []
        for result in results:
            session_name = result['session_name']
            if result.get('success', False):
                message = result.get('message', '–£—Å–ø–µ—à–Ω–æ')

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                if action == "spin":
                    stars = result.get('stars_activated', 0)
                    stars_value = result.get('stars_value_activated', 0)
                    if stars > 0:
                        if stars_value > 0:
                            message += f" (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {stars} –∑–≤–µ–∑–¥ –Ω–∞ —Å—É–º–º—É ~{stars_value}‚≠ê)"
                        else:
                            message += f" (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {stars} –∑–≤–µ–∑–¥)"
                    if result.get('high_value_prize', False):
                        message += " üíé"
                elif action == "balance":
                    stars_balance = result.get('stars_balance', 0)
                    inventory_stars_value = result.get('inventory_stars_value', 0)
                    inventory_stars_count = result.get('inventory_stars_count', 0)
                    gifts_count = result.get('gifts_count', 0)
                    gifts_details = result.get('gifts_details', [])

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–µ–∑–¥–∞—Ö —Å –¥–µ—Ç–∞–ª—è–º–∏
                    balance_parts = []

                    if inventory_stars_value > 0:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –±–∞–ª–∞–Ω—Å –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                        balance_parts.append(f"üí∞ –ë–∞–ª–∞–Ω—Å: {stars_balance}‚≠ê")
                        balance_parts.append(f"üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {inventory_stars_value}‚≠ê ({inventory_stars_count} —à—Ç)")
                        balance_parts.append(f"üìä –í—Å–µ–≥–æ: {stars_balance + inventory_stars_value}‚≠ê")
                    else:
                        balance_parts.append(f"üí∞ –ë–∞–ª–∞–Ω—Å: {stars_balance}‚≠ê")

                    if gifts_count > 0:
                        balance_parts.append(f"üéÅ –ü–æ–¥–∞—Ä–∫–∏: {gifts_count}")

                    balance_info = "\n      ".join(balance_parts)
                    message += f"\n      {balance_info}"

                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–∞—Ö
                    if gifts_details:
                        gift_lines = []
                        for gift in gifts_details:
                            gift_lines.append(f"    üéÅ {gift['formatted']}")

                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                        if len(gift_lines) <= 3:
                            message += "\n" + "\n".join(gift_lines)
                        else:
                            message += f"\n    üéÅ {len(gift_lines)} –ø–æ–¥–∞—Ä–∫–æ–≤: {', '.join([g['name'] for g in gifts_details[:3]])}{'...' if len(gifts_details) > 3 else ''}"

                report_lines.append(f"‚úÖ {session_name}: {message}")
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                report_lines.append(f"‚ùå {session_name}: {error_msg}")

        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        report = f"üìã {self.get_action_name(action)} - –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        report += f"‚è∞ {timestamp}\n\n"

        max_length = 3800  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        current_report = report

        for line in report_lines:
            if len(current_report + line + "\n") > max_length:
                newline_count = len(current_report.split('\n'))
                remaining = len(report_lines) - newline_count + 3
                current_report += f"\n... –∏ –µ—â–µ {remaining} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                break
            current_report += line + "\n"

        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]

        await query.edit_message_text(
            current_report,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def back_to_main_menu(self, query):
        """–ë—ã—Å—Ç—Ä–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å—Ç–∞—Ä–∞—è
            if not self.cached_stats or (datetime.now().minute % 5 == 0):  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                stats = await self.get_account_stats()
                self.cached_stats = stats
            else:
                stats = self.cached_stats

            message_text = self.format_main_message(stats)
            reply_markup = self.get_main_keyboard()

            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.main_message_id = query.message.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é: {e}")
            # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            simple_stats = {
                'total': 0,
                'ready': 0,
                'issues': 0,
                'ready_percent': 0,
                'issues_percent': 0,
                'last_update': datetime.now().strftime("%H:%M")
            }
            message_text = self.format_main_message(simple_stats)
            reply_markup = self.get_main_keyboard()
            await query.edit_message_text(message_text, reply_markup=reply_markup)

    async def _check_network_connectivity(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API"""
        import aiohttp
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
                async with session.get('https://api.telegram.org') as response:
                    if response.status == 200:
                        logger.info("‚úÖ Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω")
                        return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Telegram API: {e}")
            raise ConnectionError("Telegram API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å retry –ª–æ–≥–∏–∫–æ–π"""
        self.is_running = True

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å retry
        max_retries = 5
        retry_delay = 10

        for attempt in range(max_retries):
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ #{attempt + 1}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                await self._check_network_connectivity()

                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                await self.app.initialize()
                await self.app.start()
                await self.app.updater.start_polling()

                logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                break

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–∞–π–º–∞—É—Ç –ª–∏ —ç—Ç–æ
                if "TimedOut" in str(e) or "timeout" in str(e).lower():
                    logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–∞–π–º–∞—É—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É")

                if attempt < max_retries - 1:
                    logger.info(f"–ñ–¥–µ–º {retry_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(retry_delay)
                    retry_delay = min(retry_delay * 2, 120)  # –ú–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
                else:
                    logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
                    raise

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.is_running:
                await asyncio.sleep(3)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è 500+ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        except KeyboardInterrupt:
            pass
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Å–ø–∏–Ω–æ–≤
            if self.update_task:
                self.update_task.cancel()
            if self.auto_spin_task:
                self.auto_spin_task.cancel()

            await self.app.updater.stop()
            await self.app.stop()
            await self.app.shutdown()
            await self.session_manager.close_all_clients()

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.is_running = False