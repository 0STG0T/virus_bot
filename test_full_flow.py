#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ—Ä–∏ —Å–ø–∏–Ω–∞ —Å testSpin –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
"""
import asyncio
from telethon import TelegramClient
from webapp_auth import WebAppAuth
from virus_api import VirusAPI
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def main():
    session_name = "+573181344870"  # –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    session_file = f"sessions/{session_name}"

    api_id = 21724019
    api_hash = "41c33dd2533d2dbe6fabe102831c8f208"

    client = TelegramClient(
        session_file,
        api_id,
        api_hash,
        system_version="4.16.30-vxCUSTOM"
    )

    try:
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Telegram...")
        await client.connect()

        if not await client.is_user_authorized():
            logger.error("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞!")
            return

        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")

        # –ü–æ–ª—É—á–∞–µ–º auth data
        auth = WebAppAuth(client, session_name)
        logger.info("üîê –ü–æ–ª—É—á–∞—é auth –¥–∞–Ω–Ω—ã–µ...")
        auth_data = await auth.get_webapp_data()

        if not auth_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å auth_data")
            return

        logger.info(f"‚úÖ Auth data –ø–æ–ª—É—á–µ–Ω: {auth_data[:50]}...")

        # –°–æ–∑–¥–∞–µ–º API –∫–ª–∏–µ–Ω—Ç
        api = VirusAPI(session_name)
        await api.set_auth_data(auth_data)

        # –ü—Ä–æ–±—É–µ–º —Å–ø–∏–Ω
        logger.info("\n" + "="*70)
        logger.info("üé∞ –ü–û–ü–´–¢–ö–ê #1: –ü–µ—Ä–≤—ã–π —Å–ø–∏–Ω")
        logger.info("="*70)

        success, message, reward = await api.perform_spin()
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={success}, message='{message}'")
        logger.info(f"üì¶ Reward type: {type(reward)}, reward: {reward}")

        print(f"\n=== DEBUG ===")
        print(f"success: {success}")
        print(f"message: '{message}'")
        print(f"reward: {reward}")
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫–∏: {'–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∏–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–µ' in message}")
        print(f"=== END DEBUG ===\n")

        if not success and "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∏–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–µ" in message:
            logger.info("\n" + "="*70)
            logger.info("üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ testSpin - –≤—ã–ø–æ–ª–Ω—è—é –∫–ª–∏–∫")
            logger.info("="*70)

            test_url = reward.get('link') if isinstance(reward, dict) else None
            if test_url:
                logger.info(f"üåê URL: {test_url}")

                # –ö–ª–∏–∫–∞–µ–º
                click_success, init_data = await auth.click_test_spin_url(test_url)
                logger.info(f"üìä –ö–ª–∏–∫: success={click_success}")

                if init_data:
                    logger.info(f"üìù Init data (50 —Å–∏–º–≤–æ–ª–æ–≤): {init_data[:50]}...")

                if click_success:
                    logger.info("\n" + "="*70)
                    logger.info("üé∞ –ü–û–ü–´–¢–ö–ê #2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–ø–∏–Ω –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞")
                    logger.info("="*70)

                    await asyncio.sleep(3)
                    success2, message2, reward2 = await api.perform_spin()
                    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: success={success2}, message='{message2}'")

                    if success2:
                        logger.info(f"\nüéâ –£–°–ü–ï–•! –ü—Ä–∏–∑: {reward2}")
                    else:
                        logger.error(f"\n‚ùå –í—Å–µ –µ—â–µ –æ—à–∏–±–∫–∞: {message2}")
            else:
                logger.error("‚ùå –ù–µ—Ç —Å—Å—ã–ª–∫–∏ –≤ reward")

        elif success:
            logger.info(f"\nüéâ –£–°–ü–ï–• –° –ü–ï–†–í–û–ì–û –†–ê–ó–ê! –ü—Ä–∏–∑: {reward}")

        await api.close_session()

    finally:
        await client.disconnect()
        logger.info("üëã –û—Ç–∫–ª—é—á–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
