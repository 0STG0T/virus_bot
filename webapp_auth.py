import asyncio
import logging
from typing import Optional, Dict
from telethon import TelegramClient
from telethon.tl.functions.messages import RequestWebViewRequest
from telethon.tl.types import InputBotAppShortName
from urllib.parse import unquote, parse_qs
import json
import base64
import aiohttp

logger = logging.getLogger(__name__)

class WebAppAuth:
    def __init__(self, client: TelegramClient, session_name: str):
        self.client = client
        self.session_name = session_name

    async def get_webapp_data(self) -> Optional[str]:
        try:
            bot = await self.client.get_entity("@virus_play_bot")

            web_view = await self.client(RequestWebViewRequest(
                peer=bot,
                bot=bot,
                platform='web',
                from_bot_menu=False,
                url='https://virusgift.pro/'
            ))

            if hasattr(web_view, 'url') and web_view.url:
                return self._extract_init_data(web_view.url)

            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è WebApp –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {self.session_name}: {e}")
            return None

    def _extract_init_data(self, url: str) -> Optional[str]:
        try:
            if '#tgWebAppData=' in url:
                tg_data = url.split('#tgWebAppData=')[1].split('&')[0]
                return unquote(tg_data)

            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è init data: {e}")
            return None

    async def get_auth_token(self) -> Optional[str]:
        init_data = await self.get_webapp_data()
        if not init_data:
            return None

        try:
            params = parse_qs(init_data)

            if 'user' in params:
                user_data = json.loads(params['user'][0])

                auth_payload = {
                    'initData': init_data,
                    'user': user_data
                }

                return base64.b64encode(json.dumps(auth_payload).encode()).decode()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è auth —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {self.session_name}: {e}")

        return None

    async def validate_auth(self, auth_token: str) -> bool:
        try:
            decoded = base64.b64decode(auth_token.encode()).decode()
            auth_data = json.loads(decoded)

            return 'initData' in auth_data and 'user' in auth_data
        except:
            return False

    async def click_test_spin_url(self, url: str) -> tuple[bool, Optional[str]]:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç WebApp –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è testSpin –∏ –∂–¥–µ—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏

        Returns:
            tuple[bool, Optional[str]]: (—É—Å–ø–µ—Ö, init_data –∏–ª–∏ None)
        """
        try:
            logger.info(f"üîó [{self.session_name}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ—Å—Ç–æ–≤—É—é —Å—Å—ã–ª–∫—É: {url}")

            # –ü–∞—Ä—Å–∏–º —Å—Å—ã–ª–∫—É: https://t.me/jet_diceclub_bot/dapp?startapp=cfSbzBT4KPk
            if 't.me/' not in url:
                logger.warning(f"[{self.session_name}] URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç t.me/")
                return False, None

            parts = url.split('t.me/')[1].split('/')
            if len(parts) < 2:
                logger.warning(f"[{self.session_name}] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: {url}")
                return False, None

            bot_username = parts[0]
            app_short_name = parts[1].split('?')[0]

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp
            start_param = None
            if '?startapp=' in url:
                start_param = url.split('?startapp=')[1].split('&')[0]

            logger.info(f"üîó [{self.session_name}] –ë–æ—Ç: @{bot_username}, –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app_short_name}, –ü–∞—Ä–∞–º–µ—Ç—Ä: {start_param}")

            # –ü–æ–ª—É—á–∞–µ–º entity –±–æ—Ç–∞
            logger.info(f"üîó [{self.session_name}] –ü–æ–ª—É—á–∞—é entity –±–æ—Ç–∞ @{bot_username}...")
            bot = await self.client.get_entity(f"@{bot_username}")
            logger.info(f"‚úÖ [{self.session_name}] Entity –±–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω: {bot.id}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è WebApp
            webapp_url = f"https://t.me/{bot_username}/{app_short_name}"
            if start_param:
                webapp_url += f"?startapp={start_param}"

            logger.info(f"üîó [{self.session_name}] –û—Ç–∫—Ä—ã–≤–∞—é WebApp –ø–æ URL: {webapp_url}")
            logger.info(f"‚è≥ [{self.session_name}] –ñ–¥—É –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ WebApp (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 20-30 —Å–µ–∫—É–Ω–¥)...")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º WebApp —á–µ—Ä–µ–∑ RequestWebViewRequest –∏ –ñ–î–ï–ú –æ—Ç–≤–µ—Ç–∞
            try:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –∏ –∂–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                logger.info(f"üîß [{self.session_name}] –û—Ç–ø—Ä–∞–≤–ª—è—é RequestWebViewRequest...")
                logger.info(f"   üìç peer: {bot.id}")
                logger.info(f"   üìç bot: {bot.id}")
                logger.info(f"   üìç platform: android")
                logger.info(f"   üìç url: {webapp_url}")
                logger.info(f"   üìç from_bot_menu: False")

                web_view = await asyncio.wait_for(
                    self.client(RequestWebViewRequest(
                        peer=bot,
                        bot=bot,
                        platform='android',
                        from_bot_menu=False,
                        url=webapp_url
                    )),
                    timeout=45.0  # –£–≤–µ–ª–∏—á–∏–ª –¥–æ 45 —Å–µ–∫—É–Ω–¥
                )

                logger.info(f"‚úÖ [{self.session_name}] WebApp –æ—Ç–≤–µ—Ç–∏–ª!")
                logger.info(f"üì¶ [{self.session_name}] –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(web_view)}")
                logger.info(f"üì¶ [{self.session_name}] –û—Ç–≤–µ—Ç WebApp (repr): {repr(web_view)}")
                logger.info(f"üì¶ [{self.session_name}] –û—Ç–≤–µ—Ç WebApp (str): {str(web_view)}")
                logger.info(f"üì¶ [{self.session_name}] –ê—Ç—Ä–∏–±—É—Ç—ã –æ—Ç–≤–µ—Ç–∞: {dir(web_view)}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ URL —Å –¥–∞–Ω–Ω—ã–º–∏
                if hasattr(web_view, 'url'):
                    logger.info(f"‚úÖ [{self.session_name}] –ê—Ç—Ä–∏–±—É—Ç 'url' –Ω–∞–π–¥–µ–Ω")
                    logger.info(f"üåê [{self.session_name}] URL –æ—Ç–≤–µ—Ç–∞ (—Ç–∏–ø): {type(web_view.url)}")
                    logger.info(f"üåê [{self.session_name}] URL –æ—Ç–≤–µ—Ç–∞ (–ø–æ–ª–Ω—ã–π): {web_view.url}")
                else:
                    logger.warning(f"‚ö†Ô∏è [{self.session_name}] –ê—Ç—Ä–∏–±—É—Ç 'url' –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ!")

                if hasattr(web_view, 'url') and web_view.url:
                    webapp_full_url = web_view.url

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º init data –µ—Å–ª–∏ –µ—Å—Ç—å
                    if '#tgWebAppData=' in webapp_full_url:
                        init_data = self._extract_init_data(webapp_full_url)
                        if init_data:
                            logger.info(f"‚úÖ [{self.session_name}] WebApp –≤–µ—Ä–Ω—É–ª init_data!")
                            logger.info(f"üìù [{self.session_name}] Init data (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): {init_data[:100]}...")

                            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –î–µ–ª–∞–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ WebApp URL —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å cookies
                            logger.info(f"üåê [{self.session_name}] –û—Ç–∫—Ä—ã–≤–∞—é WebApp URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞...")

                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –±–µ–∑ —Ö—ç—à–∞
                            base_url = webapp_full_url.split('#')[0]
                            logger.info(f"üåê [{self.session_name}] Base URL: {base_url}")

                            try:
                                # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
                                headers = {
                                    'User-Agent': 'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Mobile Safari/537.36',
                                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
                                    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
                                    'Accept-Encoding': 'gzip, deflate, br',
                                    'Referer': 'https://web.telegram.org/',
                                    'sec-ch-ua': '"Chromium";v="140", "Not=A?Brand";v="24"',
                                    'sec-ch-ua-mobile': '?1',
                                    'sec-ch-ua-platform': '"Android"',
                                    'sec-fetch-dest': 'iframe',
                                    'sec-fetch-mode': 'navigate',
                                    'sec-fetch-site': 'cross-site',
                                    'sec-fetch-user': '?1',
                                    'upgrade-insecure-requests': '1'
                                }

                                async with aiohttp.ClientSession() as http_session:
                                    logger.info(f"üì° [{self.session_name}] –û—Ç–ø—Ä–∞–≤–ª—è—é GET –∑–∞–ø—Ä–æ—Å –∫ {base_url}...")

                                    async with http_session.get(
                                        base_url,
                                        headers=headers,
                                        allow_redirects=True,
                                        timeout=aiohttp.ClientTimeout(total=30)
                                    ) as response:
                                        logger.info(f"‚úÖ [{self.session_name}] HTTP –æ—Ç–≤–µ—Ç: {response.status}")
                                        logger.info(f"üç™ [{self.session_name}] Cookies: {response.cookies}")

                                        # –ß–∏—Ç–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
                                        content = await response.text()
                                        logger.info(f"üìÑ [{self.session_name}] –ü–æ–ª—É—á–µ–Ω–æ {len(content)} –±–∞–π—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞")

                                        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç, —Å–ª–µ–¥—É–µ–º –µ–º—É
                                        if response.status in [301, 302, 307, 308]:
                                            redirect_url = str(response.url)
                                            logger.info(f"üîÑ [{self.session_name}] –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞: {redirect_url}")

                            except Exception as e_http:
                                logger.warning(f"‚ö†Ô∏è [{self.session_name}] –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ): {e_http}")

                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /start –≤ –±–æ—Ç
                            if start_param:
                                try:
                                    logger.info(f"üì® [{self.session_name}] –û—Ç–ø—Ä–∞–≤–ª—è—é /start {start_param} –≤ –±–æ—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
                                    await self.client.send_message(bot, f'/start {start_param}')
                                    logger.info(f"‚úÖ [{self.session_name}] /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                                except Exception as e_start:
                                    logger.warning(f"‚ö†Ô∏è [{self.session_name}] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ /start: {e_start}")

                            # –î–∞–µ–º –ë–û–õ–¨–®–ï –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É - –≤–æ–∑–º–æ–∂–Ω–æ jetcloudapp –¥–µ–ª–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
                            logger.info(f"‚è≥ [{self.session_name}] –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
                            await asyncio.sleep(10)

                            logger.info(f"‚úÖ [{self.session_name}] –í–æ–∑–≤—Ä–∞—â–∞—é init_data –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                            return True, init_data
                        else:
                            logger.warning(f"‚ö†Ô∏è [{self.session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å init_data –∏–∑ URL")
                            return False, None
                    else:
                        logger.warning(f"‚ö†Ô∏è [{self.session_name}] WebApp –æ—Ç–∫—Ä—ã–ª—Å—è, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª tgWebAppData")
                        # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–µ—Ä —ç—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç
                        logger.info(f"‚è≥ [{self.session_name}] –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
                        await asyncio.sleep(5)
                        return True, None
                else:
                    logger.warning(f"‚ö†Ô∏è [{self.session_name}] WebApp –æ—Ç–∫—Ä—ã–ª—Å—è, –Ω–æ –Ω–µ—Ç URL –≤ –æ—Ç–≤–µ—Ç–µ")
                    return False, None

            except asyncio.TimeoutError:
                logger.error(f"‚ùå [{self.session_name}] Timeout –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç WebApp (45 —Å–µ–∫)")
                logger.info(f"‚ÑπÔ∏è [{self.session_name}] –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start –∫–∞–∫ fallback...")
                # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º /start
                if start_param:
                    try:
                        logger.info(f"üì® [{self.session_name}] –û—Ç–ø—Ä–∞–≤–ª—è—é /start {start_param}")
                        await self.client.send_message(bot, f'/start {start_param}')
                        logger.info(f"‚è≥ [{self.session_name}] –ñ–¥—É 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ /start...")
                        await asyncio.sleep(10)
                        logger.info(f"‚úÖ [{self.session_name}] /start fallback –∑–∞–≤–µ—Ä—à–µ–Ω")
                        return True, None
                    except Exception as e_fallback:
                        logger.error(f"‚ùå [{self.session_name}] –û—à–∏–±–∫–∞ –≤ /start fallback: {e_fallback}")
                        pass
                return False, None
            except Exception as e:
                logger.error(f"‚ùå [{self.session_name}] –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp: {e}")
                logger.info(f"üîÑ [{self.session_name}] –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")

                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
                try:
                    if start_param:
                        logger.info(f"üì® [{self.session_name}] –û—Ç–ø—Ä–∞–≤–ª—è—é /start {start_param}")
                        await self.client.send_message(bot, f'/start {start_param}')
                        logger.info(f"‚è≥ [{self.session_name}] –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(5)
                        logger.info(f"‚úÖ [{self.session_name}] /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        return True, None
                except Exception as e2:
                    logger.error(f"‚ùå [{self.session_name}] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                    return False, None

        except Exception as e:
            logger.error(f"‚ùå [{self.session_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ click_test_spin_url: {e}")
            return False, None