import asyncio
import logging
from typing import List, Dict, Tuple, Optional
from datetime import datetime, timedelta
from session_manager import SessionManager
from virus_api import VirusAPI
from webapp_auth import WebAppAuth
from config import (MAX_CONCURRENT_SESSIONS, DELAY_BETWEEN_ACCOUNTS, HIGH_VALUE_THRESHOLD,
                   MIN_REQUEST_INTERVAL, SUBSCRIPTION_DELAY,
                   GIFT_EXCHANGE_ON_BALANCE_CHECK, AUTO_GIFT_EXCHANGE_ENABLED,
                   GIFT_EXCHANGE_AFTER_SPIN, REDUCED_LOGGING_MODE)
import config
from telethon.tl.functions.channels import JoinChannelRequest
import time

logger = logging.getLogger(__name__)

class SpinWorker:
    def __init__(self, session_manager: SessionManager, notification_callback=None):
        self.session_manager = session_manager
        self.notification_callback = notification_callback
        self.last_request_time = {}
        self.min_request_interval = MIN_REQUEST_INTERVAL

    async def complete_prerequisites(self, api: VirusAPI, session_name: str, client) -> Tuple[bool, str]:
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
            await api.complete_referral_tasks()
            await asyncio.sleep(1)  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏

            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
            await api.complete_subscription_tasks()
            await asyncio.sleep(1)

            # –ü—Ä–æ–≤–µ—Ä–∏–º –µ—â–µ —Ä–∞–∑ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø–∏–Ω–∞
            can_spin, reason = await api.check_spin_availability()
            if not can_spin:
                return False, reason

            return True, "–í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è {session_name}: {e}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"

    async def handle_subscription_requirement(self, client, channel_info: Dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
        try:
            username = channel_info.get('username')
            url = channel_info.get('url')

            # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–±—É–µ–º –ø–æ —Å—Å—ã–ª–∫–µ (–≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)
            if url and 't.me/' in url:
                try:
                    logger.info(f"–ü–æ–¥–ø–∏—Å—ã–≤–∞—é—Å—å –ø–æ —Å—Å—ã–ª–∫–µ: {url}")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
                    if '/+' in url or '/joinchat/' in url:
                        # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞-–∏–Ω–≤–∞–π—Ç
                        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞-–∏–Ω–≤–∞–π—Ç")

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö—ç—à –∏–∑ —Å—Å—ã–ª–∫–∏
                        # –§–æ—Ä–º–∞—Ç: https://t.me/+HASH –∏–ª–∏ https://t.me/joinchat/HASH
                        if '/+' in url:
                            invite_hash = url.split('/+')[1].split('?')[0]
                        else:
                            invite_hash = url.split('/joinchat/')[1].split('?')[0]

                        logger.info(f"–ò–Ω–≤–∞–π—Ç —Ö—ç—à: {invite_hash}")

                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –∏–Ω–≤–∞–π—Ç—É
                        from telethon.tl.functions.messages import ImportChatInviteRequest

                        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ
                        result = await client(ImportChatInviteRequest(invite_hash))
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–µ: {result}")
                        await asyncio.sleep(SUBSCRIPTION_DELAY)
                        return True
                    else:
                        # –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ç–∏–ø–∞ t.me/channel_name
                        channel_name = url.split('t.me/')[1].split('?')[0].split('/')[0]
                        if channel_name.startswith('@'):
                            entity = await client.get_entity(channel_name)
                        else:
                            entity = await client.get_entity(f"@{channel_name}")
                        await client(JoinChannelRequest(entity))
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É: {channel_name}")
                        await asyncio.sleep(SUBSCRIPTION_DELAY)
                        return True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ —Å—Å—ã–ª–∫–µ {url}: {e}")

            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –ø–æ username
            if username:
                logger.info(f"–ü–æ–¥–ø–∏—Å—ã–≤–∞—é—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @{username}")
                try:
                    entity = await client.get_entity(f"@{username}")
                    await client(JoinChannelRequest(entity))
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ @{username}")
                    await asyncio.sleep(SUBSCRIPTION_DELAY)
                    return True
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @{username}: {e}")

            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    async def perform_single_spin(self, session_name: str) -> Dict[str, any]:
        result = {
            'session_name': session_name,
            'success': False,
            'message': '',
            'reward': None,
            'high_value_item': False,
            'stars_activated': 0
        }

        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            current_time = time.time()
            if session_name in self.last_request_time:
                time_diff = current_time - self.last_request_time[session_name]
                if time_diff < self.min_request_interval:
                    await asyncio.sleep(self.min_request_interval - time_diff)

            self.last_request_time[session_name] = time.time()

            client = await self.session_manager.create_client(session_name)
            if not client:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç'
                return result

            auth = WebAppAuth(client, session_name)
            auth_data = await auth.get_webapp_data()

            if not auth_data:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                await client.disconnect()
                return result

            api = VirusAPI(session_name)
            await api.set_auth_data(auth_data)

            can_spin, reason = await api.check_spin_availability()
            if not can_spin:
                if "24 —á–∞—Å–∞" in reason:
                    result['message'] = '–Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–∏ —Å–ø–∏–Ω —Ç–∞–∫ –∫–∞–∫ —Å –ø—Ä–æ—à–ª–æ–≥–æ –Ω–µ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞'
                elif "—Ä–µ—Ñ–∫–∏" in reason or "–ø–æ–¥–ø–∏—Å–∫–∏" in reason:
                    prerequisites_ok, _ = await self.complete_prerequisites(api, session_name, client)
                    if not prerequisites_ok:
                        result['message'] = f'–Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–∏ —Å–ø–∏–Ω —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∫–∞–∫–∏–µ –ª–∏–±–æ —É—Å–ª–æ–≤–∏—è ({reason})'
                        await api.close_session()
                        await client.disconnect()
                        return result

                    can_spin, reason = await api.check_spin_availability()
                    if not can_spin:
                        result['message'] = f'–Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–∏ —Å–ø–∏–Ω ({reason})'
                        await api.close_session()
                        await client.disconnect()
                        return result
                else:
                    result['message'] = f'–Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–∏ —Å–ø–∏–Ω ({reason})'
                    await api.close_session()
                    await client.disconnect()
                    return result

            # === –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –§–†–ò –°–ü–ò–ù–ê ===
            logger.info(f"üé∞ [{session_name}] === –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –§–†–ò –°–ü–ò–ù–ê ===")

            # –ü–æ–ø—ã—Ç–∫–∞ 1: –ü–µ—Ä–≤—ã–π —Å–ø–∏–Ω
            logger.info(f"üé∞ [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #1: –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–≤—ã–π —Å–ø–∏–Ω...")
            spin_success, spin_message, reward = await api.perform_spin()
            logger.info(f"üìä [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={spin_success}, message='{spin_message}', reward={reward}")

            # –ï—Å–ª–∏ —Å–ø–∏–Ω –Ω–µ—É—Å–ø–µ—à–µ–Ω - –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–æ 3 —Ä–∞–∑
            attempt = 1
            while not spin_success and attempt < 4:
                attempt += 1
                logger.warning(f"‚ö†Ô∏è [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –°–ø–∏–Ω –Ω–µ—É—Å–ø–µ—à–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—à–∏–±–∫—É...")

                handled = False

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ 1: –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∏–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–µ
                if "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∏–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–µ" in spin_message:
                    logger.info(f"üîó [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ '–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–ª–∏–∫ –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–µ'")

                    if isinstance(reward, dict) and 'link' in reward:
                        test_url = reward['link']
                        logger.info(f"üîó [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ò–∑–≤–ª–µ—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {test_url}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏: –∫–∞–Ω–∞–ª –∏–ª–∏ WebApp
                        if '/dapp' in test_url or 'startapp=' in test_url:
                            # –≠—Ç–æ WebApp - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ click_test_spin_url
                            logger.info(f"üîó [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û–±–Ω–∞—Ä—É–∂–µ–Ω WebApp - –≤—ã–ø–æ–ª–Ω—è—é –∫–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ...")
                            click_success, init_data = await auth.click_test_spin_url(test_url)
                            logger.info(f"üîó [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ö–ª–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: {click_success}")

                            if click_success:
                                if init_data:
                                    logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü–æ–ª—É—á–µ–Ω init_data –æ—Ç WebApp")
                                    logger.info(f"üìù [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: Init data (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤): {init_data[:50]}...")
                                else:
                                    logger.info(f"‚ÑπÔ∏è [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: WebApp –æ—Ç–∫—Ä—ã–ª—Å—è –±–µ–∑ init_data")

                                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ GraphQL API (–∫–∞–∫ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤)
                                task_id = reward.get('task_id') if isinstance(reward, dict) else None

                                if task_id:
                                    logger.info(f"üåê [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∫–ª–∏–∫ WebApp –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
                                    click_registered, click_message = await api.mark_test_spin_task_click(task_id)

                                    if click_registered:
                                        logger.info(f"‚úÖ [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ö–ª–∏–∫ WebApp –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {click_message}")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫ WebApp: {click_message}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: task_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ reward –¥–ª—è WebApp")

                                logger.info(f"üîó [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ñ–¥—É 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º —Å–ø–∏–Ω–æ–º...")
                                await asyncio.sleep(2)
                                logger.info(f"üé∞ [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü–æ–≤—Ç–æ—Ä—è—é —Å–ø–∏–Ω –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞...")
                                spin_success, spin_message, reward = await api.perform_spin()
                                logger.info(f"üìä [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt} —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={spin_success}, message='{spin_message}', reward={reward}")
                                handled = True
                            else:
                                logger.error(f"‚ùå [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –Ω–∞ WebApp")
                        else:
                            # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
                            logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–∞–Ω–∞–ª - –ø–æ–¥–ø–∏—Å—ã–≤–∞—é—Å—å...")

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è handle_subscription_requirement
                            channel_info = {
                                'url': test_url,
                                'username': None  # –ò–∑–≤–ª–µ—á–µ–º –∏–∑ URL
                            }

                            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ URL –µ—Å–ª–∏ –µ—Å—Ç—å
                            if 't.me/' in test_url:
                                username = test_url.split('t.me/')[1].split('?')[0].split('/')[0]
                                if username and not username.startswith('+'):
                                    channel_info['username'] = username
                                    logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ò–∑–≤–ª–µ—á–µ–Ω username –∫–∞–Ω–∞–ª–∞: @{username}")

                            subscription_success = await self.handle_subscription_requirement(client, channel_info)
                            logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {subscription_success}")

                            if subscription_success:
                                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫ —á–µ—Ä–µ–∑ GraphQL API
                                task_id = reward.get('task_id') if isinstance(reward, dict) else None

                                if task_id:
                                    logger.info(f"üåê [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –∫–ª–∏–∫ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}...")
                                    click_success, click_message = await api.mark_test_spin_task_click(task_id)

                                    if click_success:
                                        logger.info(f"‚úÖ [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ö–ª–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {click_message}")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫: {click_message}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: task_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ reward")

                                logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ñ–¥—É 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–∫–∞...")
                                await asyncio.sleep(2)
                                logger.info(f"üé∞ [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü–æ–≤—Ç–æ—Ä—è—é —Å–ø–∏–Ω –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
                                spin_success, spin_message, reward = await api.perform_spin()
                                logger.info(f"üìä [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt} —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={spin_success}, message='{spin_message}', reward={reward}")
                                handled = True
                            else:
                                logger.error(f"‚ùå [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
                    else:
                        logger.error(f"‚ùå [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: reward –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É: {reward}")

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ 2: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
                elif "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª" in spin_message:
                    logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª'")

                    if isinstance(reward, dict):
                        logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: {reward}")
                        logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª...")

                        subscription_success = await self.handle_subscription_requirement(client, reward)
                        logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {subscription_success}")

                        if subscription_success:
                            logger.info(f"üì° [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ñ–¥—É 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏...")
                            await asyncio.sleep(3)
                            logger.info(f"üé∞ [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü–æ–≤—Ç–æ—Ä—è—é —Å–ø–∏–Ω –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏...")
                            spin_success, spin_message, reward = await api.perform_spin()
                            logger.info(f"üìä [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt} —Ä–µ–∑—É–ª—å—Ç–∞—Ç: success={spin_success}, message='{spin_message}', reward={reward}")
                            handled = True
                        else:
                            logger.error(f"‚ùå [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª")
                    else:
                        logger.error(f"‚ùå [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: reward –Ω–µ —è–≤–ª—è–µ—Ç—Å—è dict: {reward}")

                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ - –≤—ã—Ö–æ–¥–∏–º
                if not handled:
                    logger.error(f"‚ùå [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: '{spin_message}'")
                    logger.error(f"‚ùå [{session_name}] –ü–æ–ø—ã—Ç–∫–∞ #{attempt}: –ü—Ä–µ—Ä—ã–≤–∞—é —Ü–∏–∫–ª –ø–æ–ø—ã—Ç–æ–∫")
                    break

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not spin_success:
                logger.error(f"‚ùå [{session_name}] === –§–ò–ù–ê–õ: –°–ø–∏–Ω –Ω–µ—É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ {attempt} –ø–æ–ø—ã—Ç–æ–∫ ===")
                logger.error(f"‚ùå [{session_name}] –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: '{spin_message}'")
                result['message'] = f'–Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–∏ —Å–ø–∏–Ω ({spin_message})'
                await api.close_session()
                await client.disconnect()
                return result

            logger.info(f"‚úÖ [{session_name}] === –£–°–ü–ï–•: –°–ø–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! ===")

            if reward:
                _, reward_desc, high_value, is_gift = await api.process_reward(reward)
                result['reward'] = reward_desc
                result['high_value_item'] = high_value

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –í–°–ï–• –ø–æ–¥–∞—Ä–∫–∞—Ö –∏–∑ —Ñ—Ä–∏ —Å–ø–∏–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–µ—Å—Å–∏—è - –ø–æ–¥–∞—Ä–æ–∫ - —Ü–µ–Ω–Ω–æ—Å—Ç—å
                if is_gift and self.notification_callback:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ reward
                    exchange_price = reward.get('exchangePrice', 0)
                    gift_name = reward.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫')

                    if high_value:
                        await self.notification_callback(
                            f"üíé –§–†–ò –°–ü–ò–ù | {session_name} | {gift_name} | {exchange_price}‚≠ê"
                        )
                    else:
                        await self.notification_callback(
                            f"üéÅ –§–†–ò –°–ü–ò–ù | {session_name} | {gift_name} | {exchange_price}‚≠ê"
                        )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤–µ–∑–¥
            try:
                should_activate, balance_stars, inventory_stars, can_activate, reason = await api.should_activate_stars()
                if should_activate:
                    logger.info(f"‚úÖ [{session_name}] –ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–£–ñ–ù–ê: –±–∞–ª–∞–Ω—Å {balance_stars}‚≠ê, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {inventory_stars}‚≠ê, –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ~{can_activate}‚≠ê ({reason})")
                else:
                    logger.info(f"‚è∏Ô∏è [{session_name}] –ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï –ù–£–ñ–ù–ê: –±–∞–ª–∞–Ω—Å {balance_stars}‚≠ê, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {inventory_stars}‚≠ê ({reason})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è {session_name}: {e}")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–≤–µ–∑–¥—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–ø–∏–Ω–∞
            try:
                activated_count, total_found, stars_value = await api.activate_all_stars()
                if activated_count > 0:
                    logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_count} –∏–∑ {total_found} –∑–≤–µ–∑–¥ (~{stars_value}‚≠ê) –¥–ª—è {session_name}")
                    result['stars_activated'] = activated_count
                    result['stars_value_activated'] = stars_value
                elif total_found > 0:
                    logger.info(f"‚è∏Ô∏è –ù–∞–π–¥–µ–Ω–æ {total_found} –∑–≤–µ–∑–¥ (~{stars_value}‚≠ê), –Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ 0 –¥–ª—è {session_name} (–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ <= 100‚≠ê)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤–µ–∑–¥ –¥–ª—è {session_name}: {e}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ –¥–µ—à–µ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ—Å–ª–µ —Å–ø–∏–Ω–∞
            if config.GIFT_EXCHANGE_AFTER_SPIN and config.AUTO_GIFT_EXCHANGE_ENABLED:
                try:
                    exchanged_count, total_gifts, exchanged_list = await api.auto_exchange_cheap_gifts()
                    if exchanged_count > 0:
                        logger.info(f"–ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ –ø–æ—Å–ª–µ —Å–ø–∏–Ω–∞ {session_name}: –ø—Ä–æ–¥–∞–Ω–æ {exchanged_count} –∏–∑ {total_gifts} –ø–æ–¥–∞—Ä–∫–æ–≤")
                        result['gifts_exchanged'] = exchanged_count
                        result['gifts_exchanged_list'] = exchanged_list
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ—Å–ª–µ —Å–ø–∏–Ω–∞ {session_name}: {e}")

            result['success'] = True
            result['message'] = f'—Ñ—Ä–∏ —Å–ø–∏–Ω –±—ã–ª —É—Å–ø–µ—à–µ–Ω. –≤—ã–ø–∞–ª–æ: {result["reward"] or "–Ω–∏—á–µ–≥–æ"}'

            await api.close_session()
            await client.disconnect()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏–Ω–∞ –¥–ª—è {session_name}: {e}")
            result['message'] = f'–Ω–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ñ—Ä–∏ —Å–ø–∏–Ω (–æ—à–∏–±–∫–∞: {str(e)})'

        return result

    async def perform_spins_batch(self, session_names: List[str], progress_callback=None) -> List[Dict]:
        # –£–±–∏—Ä–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–ø–∏–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        results = []
        completed = [0]  # –°—á–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        total = len(session_names)

        async def spin_without_limit(session_name: str):
            result = await self.perform_single_spin(session_name)
            await asyncio.sleep(DELAY_BETWEEN_ACCOUNTS)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            completed[0] += 1
            if progress_callback:
                await progress_callback(completed[0], total)

            return result

        tasks = [spin_without_limit(name) for name in session_names]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        processed_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                processed_results.append({
                    'session_name': session_names[i],
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞: {str(result)}',
                    'reward': None,
                    'high_value_item': False,
                    'stars_activated': 0
                })
            else:
                processed_results.append(result)

        return processed_results

    async def get_all_balances(self) -> List[Tuple[str, int]]:
        session_names = await self.session_manager.get_session_names()
        balances = []

        async def get_balance_without_limit(session_name: str):
            try:
                # –ü—Ä–æ—Å—Ç–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
                current_time = time.time()
                if session_name in self.last_request_time:
                    time_diff = current_time - self.last_request_time[session_name]
                    if time_diff < self.min_request_interval:
                        await asyncio.sleep(self.min_request_interval - time_diff)

                self.last_request_time[session_name] = time.time()

                client = await self.session_manager.create_client(session_name)
                if not client:
                    return session_name, 0

                auth = WebAppAuth(client, session_name)
                auth_data = await auth.get_webapp_data()

                if not auth_data:
                    await client.disconnect()
                    return session_name, 0

                api = VirusAPI(session_name)
                await api.set_auth_data(auth_data)

                stars, _ = await api.get_balance()

                await api.close_session()
                await client.disconnect()

                return session_name, stars

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {session_name}: {e}")
                return session_name, 0

        tasks = [get_balance_without_limit(name) for name in session_names]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        for result in results:
            if isinstance(result, tuple):
                balances.append(result)
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {result}")

        balances.sort(key=lambda x: x[1], reverse=True)
        return balances

    async def activate_all_stars_batch(self) -> List[Dict]:
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –∑–≤–µ–∑–¥—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        session_names = await self.session_manager.get_session_names()
        # –£–±–∏—Ä–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = []

        async def activate_stars_without_limit(session_name: str):
            
                result = {
                    'session_name': session_name,
                    'success': False,
                    'message': '',
                    'activated_count': 0,
                    'total_found': 0
                }

                try:
                    # –ü—Ä–æ—Å—Ç–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
                    current_time = time.time()
                    if session_name in self.last_request_time:
                        time_diff = current_time - self.last_request_time[session_name]
                        if time_diff < self.min_request_interval:
                            await asyncio.sleep(self.min_request_interval - time_diff)

                    self.last_request_time[session_name] = time.time()

                    client = await self.session_manager.create_client(session_name)
                    if not client:
                        result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç'
                        return result

                    auth = WebAppAuth(client, session_name)
                    auth_data = await auth.get_webapp_data()

                    if not auth_data:
                        result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                        await client.disconnect()
                        return result

                    api = VirusAPI(session_name)
                    await api.set_auth_data(auth_data)

                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–≤–µ–∑–¥—ã
                    activated_count, total_found, stars_value = await api.activate_all_stars()

                    result['success'] = True
                    result['activated_count'] = activated_count
                    result['total_found'] = total_found
                    result['stars_value'] = stars_value
                    if activated_count > 0:
                        result['message'] = f'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_count} –∏–∑ {total_found} –∑–≤–µ–∑–¥ (~{stars_value}‚≠ê)'
                    else:
                        if total_found > 0:
                            result['message'] = f'–ù–∞–π–¥–µ–Ω–æ {total_found} –∑–≤–µ–∑–¥ (~{stars_value}‚≠ê), –Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ 0 (–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ < 100‚≠ê)'
                        else:
                            result['message'] = '–ù–µ—Ç –∑–≤–µ–∑–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏'

                    await api.close_session()
                    await client.disconnect()

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤–µ–∑–¥ –¥–ª—è {session_name}: {e}")
                    result['message'] = f'–û—à–∏–±–∫–∞: {str(e)}'

                return result

        tasks = [activate_stars_without_limit(name) for name in session_names]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        processed_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                processed_results.append({
                    'session_name': session_names[i],
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞: {str(result)}',
                    'activated_count': 0,
                    'total_found': 0
                })
            else:
                processed_results.append(result)

        return processed_results

    async def perform_paid_spins_batch(self, session_names: List[str]) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º >= 225 –∑–≤–µ–∑–¥"""
        # –£–±–∏—Ä–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = []

        async def paid_spin_without_limit(session_name: str):
            
                result = await self.perform_single_paid_spin(session_name)
                await asyncio.sleep(DELAY_BETWEEN_ACCOUNTS)
                return result

        tasks = [paid_spin_without_limit(name) for name in session_names]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        processed_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                processed_results.append({
                    'session_name': session_names[i],
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞: {str(result)}',
                    'reward': None,
                    'high_value_item': False,
                    'stars_activated': 0
                })
            else:
                processed_results.append(result)

        return processed_results

    async def perform_single_paid_spin(self, session_name: str) -> Dict[str, any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å >= 225 –∑–≤–µ–∑–¥"""
        result = {
            'session_name': session_name,
            'success': False,
            'message': '',
            'reward': None,
            'high_value_item': False,
            'stars_activated': 0
        }

        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            current_time = time.time()
            if session_name in self.last_request_time:
                time_diff = current_time - self.last_request_time[session_name]
                if time_diff < self.min_request_interval:
                    await asyncio.sleep(self.min_request_interval - time_diff)

            self.last_request_time[session_name] = time.time()

            client = await self.session_manager.create_client(session_name)
            if not client:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç'
                return result

            auth = WebAppAuth(client, session_name)
            auth_data = await auth.get_webapp_data()

            if not auth_data:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                await client.disconnect()
                return result

            api = VirusAPI(session_name)
            await api.set_auth_data(auth_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞
            can_spin, reason = await api.can_perform_paid_spin(225)  # –¢—Ä–µ–±—É–µ–º 225 –∑–≤–µ–∑–¥ –¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
            if not can_spin:
                result['message'] = f'–ø—Ä–æ–ø—É—â–µ–Ω - {reason}'
                await api.close_session()
                await client.disconnect()
                return result

            # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–ø–∏–Ω–æ–≤
            for spin_type in ["PAID", "X200", "PREMIUM"]:
                spin_success, spin_message, reward = await api.perform_paid_spin(spin_type)
                if spin_success:
                    break
                # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ç–∏–ø –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω —Ç–∏–ø–∞ {spin_type} –¥–ª—è {session_name}: {spin_message}")

            if not spin_success:
                result['message'] = f'–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω ({spin_message})'
                await api.close_session()
                await client.disconnect()
                return result

            if reward:
                _, reward_desc, high_value, is_gift = await api.process_reward(reward)
                result['reward'] = reward_desc
                result['high_value_item'] = high_value

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–∞—Ö —Å –ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–µ—Å—Å–∏—è - –ø–æ–¥–∞—Ä–æ–∫ - —Ü–µ–Ω–Ω–æ—Å—Ç—å
                if is_gift and self.notification_callback:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ reward
                    exchange_price = reward.get('exchangePrice', 0)
                    gift_name = reward.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫')

                    if high_value:
                        await self.notification_callback(
                            f"üíé –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù | {session_name} | {gift_name} | {exchange_price}‚≠ê"
                        )
                    else:
                        await self.notification_callback(
                            f"üéÅ –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù | {session_name} | {gift_name} | {exchange_price}‚≠ê"
                        )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤–µ–∑–¥
            try:
                should_activate, balance_stars, inventory_stars, can_activate, reason = await api.should_activate_stars()
                if should_activate:
                    logger.info(f"‚úÖ [{session_name}] –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù - –ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–£–ñ–ù–ê: –±–∞–ª–∞–Ω—Å {balance_stars}‚≠ê, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {inventory_stars}‚≠ê, –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ~{can_activate}‚≠ê ({reason})")
                else:
                    logger.info(f"‚è∏Ô∏è [{session_name}] –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù - –ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï –ù–£–ñ–ù–ê: –±–∞–ª–∞–Ω—Å {balance_stars}‚≠ê, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {inventory_stars}‚≠ê ({reason})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è {session_name}: {e}")

            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∑–≤–µ–∑–¥—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞
            try:
                activated_count, total_found, stars_value = await api.activate_all_stars()
                if activated_count > 0:
                    logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_count} –∏–∑ {total_found} –∑–≤–µ–∑–¥ (~{stars_value}‚≠ê) –¥–ª—è {session_name} (–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω)")
                    result['stars_activated'] = activated_count
                    result['stars_value_activated'] = stars_value
                elif total_found > 0:
                    logger.info(f"‚è∏Ô∏è –ù–∞–π–¥–µ–Ω–æ {total_found} –∑–≤–µ–∑–¥ (~{stars_value}‚≠ê), –Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ 0 –¥–ª—è {session_name} (–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ <= 100‚≠ê)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤–µ–∑–¥ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ –¥–ª—è {session_name}: {e}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ –¥–µ—à–µ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞
            if config.GIFT_EXCHANGE_AFTER_SPIN and config.AUTO_GIFT_EXCHANGE_ENABLED:
                try:
                    exchanged_count, total_gifts, exchanged_list = await api.auto_exchange_cheap_gifts()
                    if exchanged_count > 0:
                        logger.info(f"–ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ {session_name}: –ø—Ä–æ–¥–∞–Ω–æ {exchanged_count} –∏–∑ {total_gifts} –ø–æ–¥–∞—Ä–∫–æ–≤")
                        result['gifts_exchanged'] = exchanged_count
                        result['gifts_exchanged_list'] = exchanged_list
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ {session_name}: {e}")

            result['success'] = True
            result['message'] = f'–ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω —É—Å–ø–µ—à–µ–Ω. –≤—ã–ø–∞–ª–æ: {result["reward"] or "–Ω–∏—á–µ–≥–æ"}'

            await api.close_session()
            await client.disconnect()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ –¥–ª—è {session_name}: {e}")
            result['message'] = f'–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω (–æ—à–∏–±–∫–∞: {str(e)})'

        return result

    async def prepare_all_accounts_batch(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã (–ø—Ä–æ—Ö–æ–¥–∏—Ç onboarding)"""
        session_names = await self.session_manager.get_session_names()
        # –£–±–∏—Ä–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = []

        async def prepare_account_without_limit(session_name: str):
            
                result = await self.prepare_single_account(session_name)
                await asyncio.sleep(DELAY_BETWEEN_ACCOUNTS)
                return result

        tasks = [prepare_account_without_limit(name) for name in session_names]
        results = await asyncio.gather(*tasks, return_exceptions=True)

        processed_results = []
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                processed_results.append({
                    'session_name': session_names[i],
                    'success': False,
                    'message': f'–û—à–∏–±–∫–∞: {str(result)}',
                    'onboarding_actions': []
                })
            else:
                processed_results.append(result)

        return processed_results

    async def prepare_single_account(self, session_name: str) -> Dict[str, any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç (–ø—Ä–æ—Ö–æ–¥–∏—Ç onboarding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
        result = {
            'session_name': session_name,
            'success': False,
            'message': '',
            'onboarding_actions': []
        }

        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            current_time = time.time()
            if session_name in self.last_request_time:
                time_diff = current_time - self.last_request_time[session_name]
                if time_diff < self.min_request_interval:
                    await asyncio.sleep(self.min_request_interval - time_diff)

            self.last_request_time[session_name] = time.time()

            client = await self.session_manager.create_client(session_name)
            if not client:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç'
                return result

            auth = WebAppAuth(client, session_name)
            auth_data = await auth.get_webapp_data()

            if not auth_data:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                await client.disconnect()
                return result

            api = VirusAPI(session_name)
            await api.set_auth_data(auth_data)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_status = await api.get_account_status()

            if account_status['ready_for_automation']:
                result['success'] = True
                result['message'] = '–ê–∫–∫–∞—É–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏'
                result['onboarding_actions'] = []
                result['account_status'] = 'ready'
            elif account_status['onboarding_required']:
                result['success'] = False
                result['message'] = f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π onboarding: {', '.join(account_status['required_actions'])}"
                result['onboarding_actions'] = account_status['required_actions']
                result['account_status'] = 'needs_onboarding'
                result['detailed_error'] = account_status['error_message']
            else:
                result['success'] = False
                result['message'] = f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º: {account_status['error_message']}"
                result['onboarding_actions'] = []
                result['account_status'] = 'error'

            await api.close_session()
            await client.disconnect()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}: {e}")
            result['message'] = f'–û—à–∏–±–∫–∞: {str(e)}'

        return result

    async def validate_all_accounts_batch(self, session_names: List[str], progress_callback=None) -> List[Dict]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±–∞—Ç—á–∞–º–∏"""
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é {len(session_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        results = []
        completed = [0]
        total = len(session_names)

        async def validate_single_account(session_name: str):
            try:
                result = await self.validate_single_account(session_name)
                results.append(result)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                completed[0] += 1
                if progress_callback:
                    await progress_callback(completed[0], total)

                return result
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {session_name}: {e}")
                error_result = {
                    'session_name': session_name,
                    'success': False,
                    'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                    'account_status': 'error'
                }
                results.append(error_result)

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                completed[0] += 1
                if progress_callback:
                    await progress_callback(completed[0], total)

                return error_result

        tasks = [validate_single_account(name) for name in session_names]
        await asyncio.gather(*tasks, return_exceptions=True)

        logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(results)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return results

    async def validate_single_account(self, session_name: str) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç"""
        result = {
            'session_name': session_name,
            'success': False,
            'message': '',
            'account_status': 'unknown'
        }

        try:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            current_time = time.time()
            if session_name in self.last_request_time:
                time_diff = current_time - self.last_request_time[session_name]
                if time_diff < self.min_request_interval:
                    await asyncio.sleep(self.min_request_interval - time_diff)

            self.last_request_time[session_name] = time.time()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram —Å–µ—Å—Å–∏—é
            client = await self.session_manager.create_client(session_name)
            if not client:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç'
                result['account_status'] = 'telegram_error'
                return result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Telegram
            try:
                me = await client.get_me()
                if not me:
                    result['message'] = 'Telegram —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞'
                    result['account_status'] = 'telegram_invalid'
                    await client.disconnect()
                    return result
            except Exception as e:
                result['message'] = f'–û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}'
                result['account_status'] = 'telegram_auth_error'
                await client.disconnect()
                return result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebApp –¥–∞–Ω–Ω—ã–µ
            auth = WebAppAuth(client, session_name)
            auth_data = await auth.get_webapp_data()

            if not auth_data:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å WebApp –¥–∞–Ω–Ω—ã–µ'
                result['account_status'] = 'webapp_error'
                await client.disconnect()
                return result

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–æ—Å—Ç—É–ø
            api = VirusAPI(session_name)
            await api.set_auth_data(auth_data)

            user_info = await api.get_user_info()
            if user_info:
                result['success'] = True
                result['message'] = f"–í–∞–ª–∏–¥–µ–Ω (ID: {user_info.get('id')}, –ë–∞–ª–∞–Ω—Å: {user_info.get('starsBalance', 0)} –∑–≤–µ–∑–¥)"
                result['account_status'] = 'valid'
                result['user_id'] = user_info.get('id')
                result['stars_balance'] = user_info.get('starsBalance', 0)
            else:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
                result['account_status'] = 'api_error'

            await api.close_session()
            await client.disconnect()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {session_name}: {e}")
            result['message'] = f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}'
            result['account_status'] = 'error'

        return result

    async def check_all_balances_batch(self, session_names: List[str], batch_size: int = 20, progress_callback=None) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–º–∏ –±–∞—Ç—á–∞–º–∏"""
        logger.info(f"–ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ {len(session_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–±–∞—Ç—á–∏ –ø–æ {batch_size})")

        all_results = []
        completed = [0]
        total = len(session_names)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for i in range(0, len(session_names), batch_size):
            batch = session_names[i:i + batch_size]
            batch_results = []

            async def check_single_balance_fast(session_name: str):
                try:
                    result = await self.check_single_account_balance(session_name)
                    batch_results.append(result)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    completed[0] += 1
                    if progress_callback:
                        await progress_callback(completed[0], total)

                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if DELAY_BETWEEN_ACCOUNTS > 0.1:
                        await asyncio.sleep(DELAY_BETWEEN_ACCOUNTS)
                    return result
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {session_name}: {e}")
                    error_result = {
                        'session_name': session_name,
                        'success': False,
                        'message': f'–û—à–∏–±–∫–∞: {str(e)}',
                        'stars_balance': 0,
                        'balance': 0,
                        'gifts_count': 0
                    }
                    batch_results.append(error_result)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    completed[0] += 1
                    if progress_callback:
                        await progress_callback(completed[0], total)

                    return error_result

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞
            tasks = [check_single_balance_fast(name) for name in batch]
            await asyncio.gather(*tasks, return_exceptions=True)

            all_results.extend(batch_results)
            logger.debug(f"–ë–∞—Ç—á {i//batch_size + 1}/{(len(session_names)-1)//batch_size + 1} –∑–∞–≤–µ—Ä—à–µ–Ω")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –∞–∫–∫–∏ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏, –ø–æ—Ç–æ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞ –∑–≤–µ–∑–¥
        all_results.sort(key=lambda x: (x.get('gifts_count', 0) == 0, -x.get('stars_balance', 0)))

        logger.info(f"–ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(all_results)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –±–∞–ª–∞–Ω—Å—É)")
        return all_results

    async def check_single_account_balance(self, session_name: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        result = {
            'session_name': session_name,
            'success': False,
            'message': '',
            'stars_balance': 0,
            'balance': 0,
            'gifts_count': 0,
            'gifts_list': [],
            'gifts_details': []  # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∂–¥–æ–º –ø–æ–¥–∞—Ä–∫–µ
        }

        try:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            current_time = time.time()
            if session_name in self.last_request_time:
                time_diff = current_time - self.last_request_time[session_name]
                if time_diff < self.min_request_interval:
                    await asyncio.sleep(self.min_request_interval - time_diff)

            self.last_request_time[session_name] = time.time()

            client = await self.session_manager.create_client(session_name)
            if not client:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç'
                return result

            auth = WebAppAuth(client, session_name)
            auth_data = await auth.get_webapp_data()

            if not auth_data:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                await client.disconnect()
                return result

            api = VirusAPI(session_name)
            await api.set_auth_data(auth_data)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await api.get_user_info()
            if user_info:
                stars_balance = user_info.get('starsBalance', 0)
                balance = user_info.get('balance', 0)

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ –∑–≤–µ–∑–¥ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                gifts_count = 0
                gifts_list = []
                gifts_details = []
                inventory_stars_count = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                inventory_stars_value = 0  # –°—É–º–º–∞ –∑–≤–µ–∑–¥ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                try:
                    inventory = await api.get_roulette_inventory(cursor=0, limit=50)

                    # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if not config.REDUCED_LOGGING_MODE:
                        logger.info(f"üîç –ò–ù–í–ï–ù–¢–ê–†–¨ {session_name}:")
                        logger.info(f"   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {inventory}")

                    if inventory and inventory.get('success') and inventory.get('prizes') is not None:
                        if not config.REDUCED_LOGGING_MODE:
                            logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–∑–æ–≤: {len(inventory['prizes'])}")

                        for i, prize_item in enumerate(inventory['prizes']):
                            status = prize_item.get('status')
                            prize = prize_item.get('prize', {})
                            prize_name = prize.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–∑')
                            exchange_price = prize.get('exchangePrice', 0)
                            unlock_at = prize_item.get('unlockAt')

                            if not config.REDUCED_LOGGING_MODE:
                                logger.info(f"   –ü—Ä–∏–∑ #{i+1}: {prize_name} (—Å—Ç–∞—Ç—É—Å: {status}, —Ü–µ–Ω–∞: {exchange_price}‚≠ê)")

                            # –°—á–∏—Ç–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ (status NONE)
                            if status == 'NONE' and ('Stars' in prize_name or 'stars' in prize_name.lower()):
                                inventory_stars_count += 1
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                                import re
                                numbers = re.findall(r'\d+', prize_name)
                                if numbers:
                                    inventory_stars_value += int(numbers[0])

                            # –ü–æ–¥–∞—Ä–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ —Å—Ç–∞—Ç—É—Å–µ IN_PROGRESS
                            if status in ['active', 'IN_PROGRESS']:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–¥–∞—Ä–∫–æ–º (–Ω–µ –∑–≤–µ–∑–¥—ã –∏ –Ω–µ –≤–∏—Ä—É—Å—ã)
                                if not prize_name.endswith('Stars') and not prize_name.endswith('Viruses'):
                                    gifts_count += 1
                                    gifts_list.append(prize_name)

                                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                                    unlock_date_str = "–≥–æ—Ç–æ–≤"
                                    if unlock_at:
                                        try:
                                            from datetime import datetime
                                            unlock_time = datetime.fromisoformat(unlock_at.replace('Z', '+00:00'))
                                            unlock_date_str = unlock_time.strftime("–¥–æ %d.%m.%Y %H:%M")
                                        except:
                                            unlock_date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                                    gift_detail = {
                                        'name': prize_name,
                                        'price': exchange_price,
                                        'unlock_date': unlock_date_str,
                                        'status': status,
                                        'formatted': f"{prize_name} ({exchange_price}‚≠ê, {unlock_date_str})"
                                    }
                                    gifts_details.append(gift_detail)

                                    if not config.REDUCED_LOGGING_MODE:
                                        logger.info(f"     ‚úÖ –ù–ê–ô–î–ï–ù –ü–û–î–ê–†–û–ö: {gift_detail['formatted']}")

                    else:
                        if not config.REDUCED_LOGGING_MODE:
                            prizes_status = "None" if inventory.get('prizes') is None else f"—Å–ø–∏—Å–æ–∫ –∏–∑ {len(inventory.get('prizes', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
                            logger.info(f"   ‚ùå –ù–µ—Ç –ø—Ä–∏–∑–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: prizes={prizes_status}, success={inventory.get('success') if inventory else None}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –¥–ª—è {session_name}: {e}")

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ –¥–µ—à–µ–≤—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞
                if config.GIFT_EXCHANGE_ON_BALANCE_CHECK and config.AUTO_GIFT_EXCHANGE_ENABLED:
                    try:
                        exchanged_count, _, exchanged_list = await api.auto_exchange_cheap_gifts()
                        if exchanged_count > 0:
                            logger.info(f"–ê–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ {session_name}: –ø—Ä–æ–¥–∞–Ω–æ {exchanged_count} –ø–æ–¥–∞—Ä–∫–æ–≤")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ {session_name}: {e}")

                result['success'] = True
                result['stars_balance'] = stars_balance
                result['balance'] = balance
                result['gifts_count'] = gifts_count
                result['gifts_list'] = gifts_list
                result['gifts_details'] = gifts_details
                result['inventory_stars_count'] = inventory_stars_count
                result['inventory_stars_value'] = inventory_stars_value

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_parts = []

                # –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                if inventory_stars_value > 0:
                    message_parts.append(f"–ó–≤–µ–∑–¥—ã: {stars_balance} (–±–∞–ª–∞–Ω—Å) + {inventory_stars_value} (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)")
                else:
                    message_parts.append(f"–ó–≤–µ–∑–¥—ã: {stars_balance}")

                message_parts.append(f"–í–∏—Ä—É—Å—ã: {balance}")

                if gifts_count > 0:
                    message_parts.append(f"–ü–æ–¥–∞—Ä–∫–∏: {gifts_count}")

                result['message'] = ", ".join(message_parts)

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–ª–∞—Ç–Ω—ã–º —Å–ø–∏–Ω–∞–º
                if stars_balance >= 200:
                    result['message'] += " (–≥–æ—Ç–æ–≤ –∫ –ø–ª–∞—Ç–Ω—ã–º —Å–ø–∏–Ω–∞–º)"
            else:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ'

            await api.close_session()
            await client.disconnect()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ {session_name}: {e}")
            result['message'] = f'–û—à–∏–±–∫–∞: {str(e)}'

        return result

    async def perform_paid_spins_batch(self, session_names: List[str]) -> List[Dict]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –¥–ª—è {len(session_names)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")

        results = []
        # –£–±–∏—Ä–∞–µ–º —Å–µ–º–∞—Ñ–æ—Ä - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ

        async def perform_single_paid_spin_task(session_name: str):
            
                try:
                    result = await self.perform_single_paid_spin(session_name)
                    results.append(result)
                    await asyncio.sleep(DELAY_BETWEEN_ACCOUNTS)
                    return result
                except Exception as e:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ {session_name}: {e}")
                    results.append({
                        'session_name': session_name,
                        'success': False,
                        'message': f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}',
                        'stars_activated': 0,
                        'high_value_prize': False
                    })

        tasks = [perform_single_paid_spin_task(name) for name in session_names]
        await asyncio.gather(*tasks, return_exceptions=True)

        logger.info(f"–ü–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        return results

    async def perform_single_paid_spin(self, session_name: str) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        result = {
            'session_name': session_name,
            'success': False,
            'message': '',
            'stars_activated': 0,
            'high_value_prize': False,
            'prize_name': ''
        }

        try:
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
            current_time = time.time()
            if session_name in self.last_request_time:
                time_diff = current_time - self.last_request_time[session_name]
                if time_diff < self.min_request_interval:
                    await asyncio.sleep(self.min_request_interval - time_diff)

            self.last_request_time[session_name] = time.time()

            client = await self.session_manager.create_client(session_name)
            if not client:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç'
                return result

            auth = WebAppAuth(client, session_name)
            auth_data = await auth.get_webapp_data()

            if not auth_data:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
                await client.disconnect()
                return result

            api = VirusAPI(session_name)
            await api.set_auth_data(auth_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–ø–∏–Ω–æ–º
            user_info = await api.get_user_info()
            if not user_info:
                result['message'] = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
                await api.close_session()
                await client.disconnect()
                return result

            stars_balance = user_info.get('starsBalance', 0)
            if stars_balance < 200:
                result['message'] = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥: {stars_balance}/200'
                await api.close_session()
                await client.disconnect()
                return result

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω (—Ç–∏–ø "PAID" —Å—Ç–æ–∏—Ç 200 –∑–≤–µ–∑–¥)
            spin_success, spin_message, prize = await api.perform_paid_spin("PAID")

            if spin_success and prize:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏–∑
                is_processed, prize_description, is_high_value, is_gift = await api.process_reward(prize)

                result['success'] = True
                result['message'] = f"–ü–æ–ª—É—á–∏–ª {prize.get('name', '–ø—Ä–∏–∑')}"
                result['prize_name'] = prize.get('name', '')
                result['high_value_prize'] = is_high_value

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–∞—Ä–∫–∞—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å–µ—Å—Å–∏—è - –ø–æ–¥–∞—Ä–æ–∫ - —Ü–µ–Ω–Ω–æ—Å—Ç—å
                if is_gift and self.notification_callback:
                    exchange_price = prize.get('exchangePrice', 0)
                    gift_name = prize.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫')

                    if is_high_value:
                        await self.notification_callback(
                            f"üíé –ê–í–¢–û –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù | {session_name} | {gift_name} | {exchange_price}‚≠ê"
                        )
                    else:
                        await self.notification_callback(
                            f"üéÅ –ê–í–¢–û –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù | {session_name} | {gift_name} | {exchange_price}‚≠ê"
                        )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–≤–µ–∑–¥
                try:
                    should_activate, balance_stars, inventory_stars, can_activate, reason = await api.should_activate_stars()
                    if should_activate:
                        logger.info(f"‚úÖ [{session_name}] –ê–í–¢–û –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù - –ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–£–ñ–ù–ê: –±–∞–ª–∞–Ω—Å {balance_stars}‚≠ê, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {inventory_stars}‚≠ê, –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ~{can_activate}‚≠ê ({reason})")
                    else:
                        logger.info(f"‚è∏Ô∏è [{session_name}] –ê–í–¢–û –ü–õ–ê–¢–ù–´–ô –°–ü–ò–ù - –ê–ö–¢–ò–í–ê–¶–ò–Ø –ù–ï –ù–£–ñ–ù–ê: –±–∞–ª–∞–Ω—Å {balance_stars}‚≠ê, –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å {inventory_stars}‚≠ê ({reason})")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è {session_name}: {e}")

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–≤–µ–∑–¥—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ —Å–ø–∏–Ω–∞
                activated_stars, total_found, stars_value = await api.activate_all_stars()
                result['stars_activated'] = activated_stars
                result['stars_value_activated'] = stars_value

                if activated_stars > 0:
                    result['message'] += f" (–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {activated_stars} –∑–≤–µ–∑–¥ –Ω–∞ —Å—É–º–º—É ~{stars_value}‚≠ê)"
                elif total_found > 0:
                    result['message'] += f" (–Ω–∞–π–¥–µ–Ω–æ {total_found} –∑–≤–µ–∑–¥ –Ω–∞ —Å—É–º–º—É ~{stars_value}‚≠ê, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ - –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ <= 100‚≠ê)"

                logger.info(f"‚úÖ –ü–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω {session_name}: {result['message']}")

            else:
                result['message'] = f'–°–ø–∏–Ω –Ω–µ—É–¥–∞—á–µ–Ω: {spin_message}'
                logger.warning(f"‚ùå –ü–ª–∞—Ç–Ω—ã–π —Å–ø–∏–Ω {session_name}: {spin_message}")

            await api.close_session()
            await client.disconnect()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ —Å–ø–∏–Ω–∞ {session_name}: {e}")
            result['message'] = f'–û—à–∏–±–∫–∞: {str(e)}'

        return result