"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–∞–∫—Ü–∏–∏ —ç–º–æ–¥–∑–∏ –Ω–∞ –ø–æ—Å—Ç –≤ Telegram –∫–∞–Ω–∞–ª–µ.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ sessions/ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏.
"""

import asyncio
import os
import logging
from telethon import TelegramClient
from telethon.tl.functions.messages import SendReactionRequest
from telethon.tl.types import ReactionEmoji
from config import API_ID, API_HASH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CHANNEL_USERNAME = "pelikangik"  # –ö–∞–Ω–∞–ª
MESSAGE_ID = 275  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
EMOJI = "üíã"  # –≠–º–æ–¥–∑–∏ –≥—É–± (–∫—Ä–∞—Å–Ω—ã–µ –≥—É–±—ã)
SESSIONS_DIR = "sessions"
DELAY_BETWEEN_REACTIONS = 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)


async def send_reaction(session_file: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç –æ—Ç –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏.

    Args:
        session_file: –ü—É—Ç—å –∫ .session —Ñ–∞–π–ª—É

    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
    """
    session_name = os.path.splitext(os.path.basename(session_file))[0]
    session_path = os.path.join(SESSIONS_DIR, session_name)

    client = None
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = TelegramClient(session_path, API_ID, API_HASH)
        await client.connect()

        if not await client.is_user_authorized():
            logger.warning(f"‚ùå {session_name}: –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é
        await client(SendReactionRequest(
            peer=CHANNEL_USERNAME,
            msg_id=MESSAGE_ID,
            reaction=[ReactionEmoji(emoticon=EMOJI)]
        ))

        logger.info(f"‚úÖ {session_name}: –†–µ–∞–∫—Ü–∏—è {EMOJI} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True

    except Exception as e:
        logger.error(f"‚ùå {session_name}: –û—à–∏–±–∫–∞ - {e}")
        return False

    finally:
        if client:
            await client.disconnect()


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–µ—Å—Å–∏–π
    if not os.path.exists(SESSIONS_DIR):
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ {SESSIONS_DIR}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö .session —Ñ–∞–π–ª–æ–≤
    session_files = []
    for file in os.listdir(SESSIONS_DIR):
        if file.lower().endswith('.session'):
            session_files.append(file)

    if not session_files:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ .session —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ {SESSIONS_DIR}/")
        return

    logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(session_files)}")
    logger.info(f"üéØ –ö–∞–Ω–∞–ª: @{CHANNEL_USERNAME}")
    logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ ID: {MESSAGE_ID}")
    logger.info(f"‚ù§Ô∏è –≠–º–æ–¥–∑–∏: {EMOJI}")
    logger.info(f"‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏: {DELAY_BETWEEN_REACTIONS}s")
    logger.info("=" * 60)

    # –°—á–µ—Ç—á–∏–∫–∏
    success_count = 0
    error_count = 0

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –æ—Ç –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
    for i, session_file in enumerate(session_files, 1):
        logger.info(f"[{i}/{len(session_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {session_file}...")

        success = await send_reaction(session_file)

        if success:
            success_count += 1
        else:
            error_count += 1

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–µ–∞–∫—Ü–∏—è–º–∏
        if i < len(session_files):
            await asyncio.sleep(DELAY_BETWEEN_REACTIONS)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    logger.info("=" * 60)
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}")
    logger.info(f"‚ùå –û—à–∏–±–∫–∏: {error_count}")
    logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(session_files)}")
    logger.info("üéâ –ì–æ—Ç–æ–≤–æ!")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
